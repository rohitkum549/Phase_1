Single Tasking using a Thread:
------------------------------

package mypackage;

//Single tasking using a thread
class MyThread implements Runnable{

	@Override
	public void run() {
		// TODO Auto-generated method stub
		//Execute the tasks one by one by calling methods
		task1();
		task2();
		task3();
	}
	void task1() {
		System.out.println("This is task 1");
	}
	void task2() {
		System.out.println("This is task 2");
	}
	void task3() {
		System.out.println("This is task 3");
	}
	
}

public class Single {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//create an object to MyThread Class
		MyThread obj=new MyThread();
		//create a thread t1 and attach it to that object
		Thread t1=new Thread(obj);
		//execute the thread t1 on that object's run() method
		t1.start();
	}

}


Multi-Tasking using a Thread:
-----------------------------

package mypackage;

//Multi-Tasking using Threads
//Two threads performing two tasks at a time
class MyThread2 implements Runnable{
	//declare a string to represent task
	String str;
	MyThread2(String str){
		this.str=str;
	}
	@Override
	public void run() {
		// TODO Auto-generated method stub
		for(int i=1;i<=10;i++) {
			System.out.println(str+":"+i);
			try {
				//cease thread execution for 2000 milliseconds
				Thread.sleep(2000);
			}
			catch(InterruptedException ie) {
				ie.printStackTrace();
			}
		}
	}
}
public class Theatre {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//create two objects to represent two tasks
		MyThread2 obj1=new MyThread2("Cut the ticket");
		MyThread2 obj2=new MyThread2("Show the seat");
		
		//create two threads and attach them to the two objects
		Thread t1=new Thread(obj1);
		Thread t2=new Thread(obj2);
		
		//start the threads
		t1.start();
		t2.start();
	}

}



Multiple Threads acting on a Single object:
-------------------------------------------
package mypackage;

//Thread unsafe - Two threads acting on same object

class Reserve implements Runnable{
	//available berths are 1
	int available=1;
	int wanted;
	
	//accept wanted berths at run time
	Reserve(int i){
		wanted=i;
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		//display available berths
		System.out.println("Available berths:"+available);
		if(available>=wanted) {
			//get the passenger name
			String name=Thread.currentThread().getName();
			//allot the berth to him
			System.out.println(wanted+" Berths reserved for "+name);
			try {
				Thread.sleep(2000);
			}
			catch(InterruptedException ie) {
				
			}	
		}
		//if available berths are less, display sorry
		else {
			System.out.println("Sorry, no berths");
		}
	}
	
}
public class Unsafe {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//Tell that 1 berth is needed
		Reserve obj=new Reserve(1);
		
		//attach first thread to the object
		Thread t1=new Thread(obj);
		//attach second thread to the object
		Thread t2=new Thread(obj);
		
		//take the thread names as person names
		t1.setName("First Person");
		t2.setName("Second Person");
		
		//send the requests for berth
		t1.start();
		t2.start();
	}

}



Thread Synchronization:
-----------------------
When a thread is already acting on an object, preventing any other thread from acting on the same object is called Thread Synchronization or Thread safe. The object on which the threads are synchronized is called synchronized object. 

Thread synchronization is recommended when multiple threads are used on the same object(in multithreading).


package mypackage2;

//Thread Synchronization - Two threads acting on same object
class Reserve implements Runnable{
	//available berths are 1
	int available=1;
	int wanted;
	
	//accept wanted berths at run time
	Reserve(int i){
		wanted=i;
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		
		synchronized(this) {//Synchronizing the current object
		//display available berths
		System.out.println("Available berths:"+available);
		if(available>=wanted) {
			//get the passenger name
			String name=Thread.currentThread().getName();
			//allot the berth to him
			System.out.println(wanted+" Berths reserved for "+name);
			try {
				Thread.sleep(2000);
				available=available-wanted;//update the no. of available berths
			}
			catch(InterruptedException ie) {
				
			}	
		}
		//if available berths are less, display sorry
		else {
			System.out.println("Sorry, no berths");
		}
		}
	}
	
}
public class Safe {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//Tell that 1 berth is needed
		Reserve obj=new Reserve(1);
		
		//attach first thread to the object
		Thread t1=new Thread(obj);
		//attach second thread to the object
		Thread t2=new Thread(obj);
		
		//take the thread names as person names
		t1.setName("First Person");
		t2.setName("Second Person");
		
		//send the requests for berth
		t1.start();
		t2.start();
	}

}

Exception Handling:
-------------------
Compile time or suntax error
logical or semantic errors

Runtime errors or Exceptions

An exception is a runtime error which occurs during program execution and terminated the program abnormally.

Exception Handling is used to avoid abnormal termination of program and makes the program robust(strong).

Five keywords in Exception Handling:
------------------------------------
blocks:
-------
try
catch
finally

clauses:
--------
throw 
throws

try{

//suspected code
}
catch(Exeption e){
//Exception handling mechansim
}

If the exception occurs in the try block the java runtime will throw an exception which is caught by catch block and handles the exception and remaining part of try block will not be executed.

package mypackage;

public class ExceptionDemo01 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int a=10,b=0;
		int rs;
		try {
		rs=a/b;
		System.out.println(rs);
		}
		catch(Exception e) {
			System.err.println("Divide by zero not allowed");
			e.printStackTrace();
		}
		System.out.println("End of program");
	}

}

----------------------------------------------------------------------

package mypackage;

public class ExceptionDemo02 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//ArithmeticException
		//int n=10/0;
		//ArrayIndexOutofBoundsException
		/*int[] n= {10,20,30,40,50};
		System.out.println(n[10]);*/
		//StringIndexOutOfBoundsException
		/*String s="hello";
		System.out.println(s.charAt(10));*/
		//NegativeArraySizeException
		//int[] n=new int[-5];
		//NumberFormatException
		/*String s="xyz";
		int n=Integer.parseInt(s);*/
		//NullPointerException
		String s=null;
		System.out.println(s.equals("Hello"));
	}

}



ArithmeticException
	-trying to divide a number by zero

ArrayIndexOutOfBoundsException
	-trying to access an element of an array which is out of index

StringIndexOutOfBoundsException
	-trying to access a char of a string which is out of index

NegativeArraySizeException
	-when the given array size is negative

NumberFormatException
	-trying to convert a String into number type which is not possible

NullPointerException
	-trying to access the members of a class when the object of the class is pointing to null

finally block:
--------------
finally block is executed irrespective of exception present in try block

In general, clean up code goes inside this block.

like closing database connection(db.close()) or closing of file(f.close())


package mypackage;

import java.util.*;
public class ExceptionDemo03 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);
		try {
			System.out.println("Enter a value:");
			int a=sc.nextInt();
			System.out.println("Enter b value:");
			int b=sc.nextInt();
			int res=a/b;
			System.out.println(res);
		}
		catch(ArithmeticException e) {
			System.err.println("Divide by zero not allowed");
		}
		catch(Exception e) {
			System.err.println("Please enter a integer value");
		}
		finally {
			System.out.println("Hey, I am finally block");
		}
	}

}


















































