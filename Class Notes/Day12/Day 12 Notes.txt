Abstract Classes:
-----------------
It is used to form the rules/specifications
A method which is declared in called as abstract method
An abstract class contains zero or more abstract methods.

e.g.

abstract class Sample{
void method1(){...}//defined or implemented or concrete method
abstract void method2();//declared method
}

If a class extends an abstract class then we need to override all abstract methods else make the class as abstract

e.g.

class Demo extends Sample
{
void method2()
{
//code
}
void method3()
{
//code
}
}
abstract class Sample2 extends Sample
{
void method4(){...}
}

-We cannot create objects for abstract classes but we can create references referring to the subclass object

e.g...

NOTE: Forces "is-a" relationship.

WAP for demonstrating full encapsulation
-----------------------------------------
Take a Student class with name,roll,age as private data members and take the getter setter methods to set and get the values.

In the TestClass under svm() create a Student class object and set and get the values for the above data members.

Interfaces:
-----------
It is used to form the rules/specifications
Does not force "is-a" relationship
In an interface all data members are public,static and final by default.
In an interface all methods are public and abstract by default

e.g. 

interface in1
{
 [public static final] int MAX=100;
 [public abstract] void method1();
 [public abstract] void method2();
}

If a class implements an interface then we need to override all abstract methods else make a class as abstract.

e.g.

class C1 implements in1
{
  void method1()
  {
  //code
  }
  void method2()
  {
  //code
  }
}

We cannot create objects for interfaces but we can create references referring to the subclass object.

A class can implement multiple interface

interface in2
{
   void m3();
}
class C2 implements in1,in2
{

}

class to class=>extends
class to interface=>implements
interface to inteface=>extends
e.g. 

interface in3 extends in1
{
}

interface to class=>error

An interface can extend multiple interfaces

e.g.

interface in4 extends in1,in2{}

Note:
-----
From Java 8 version we can define methods in interfaces using default keyword
From Java 9 version we can define private methods

Multiple Inheritance with Interfaces:
-------------------------------------

Differences between Abstract class and Interfaces:
--------------------------------------------------
An abstract class is written when ther are some common features shared by all the objects
An interface is written when all the features are implemented differently in different objects

When an abstract class is written, it is the duty of the programmer to provide subclasses to it
An interface is written when the programmer wants to leave the implementation to the third party vendors

An abstract class contains some abstract methods and also some concrete methods
An interface contains only abstract methods

An abstract class can contain instance variables also
An interface cannot contain instance variables. It contains only constants

All the abstract methods of the abstract class should be implemented in it's sub classes.
All the abstract methods of the interface should be implemented in its implementation classes.

Abstract class is declared by using the keyword abstract
Interface is declared using the keyword interface.









Introduction to Data Structures:
--------------------------------
A data structure is a storage that is used to store and organize data. It is a way of arranging data on a computer so that it can be accessed and updated efficiently.

A data structure is not only used for organizing the data. It is also used for processing, retrieving and storing data.

There are different basic and advanced types of data structures that are used in almost every program or software system that has been developed.

Classification of Data Structures:
----------------------------------
1)Linear data structure:
---------------------- 
In which data elements are arranged sequentially or linearly, where each element is attached to it's previous or next adjascent elements.
e.g. array,stack,queue, linkedlist etc..

a)static data structure: whose memory is fixed in size.
	e.g., Array

b)dynamic data structure: whose memory is not fixed
	e.g., queue, stack etc..,

2)Non-Linear Data Structure:
--------------------------
Data Strucutrue where the elements are not placed sequentially or linearly.
In non-linear data structure, we can't traverse all the elements in a single run only.
e.g., graphs, trees


Array Rotation:
---------------
package mypackage;

class RotateArray{
	public void rotate(int[] nums,int k) {
		if(k>nums.length)
			k=k%nums.length;
		int[] result=new int[nums.length];
		for(int i=0;i<k;i++) {
			result[i]=nums[nums.length-k+i];
		}
		int j=0;
		for(int i=k;i<nums.length;i++) {
			result[i]=nums[j];
			j++;
		}
		System.arraycopy(result, 0, nums, 0, nums.length);
	}
}

public class Test01 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		RotateArray r=new RotateArray();
		int arr[]= {1,2,3,4,5,6,7};
		r.rotate(arr, 4);
		for(int i=0;i<arr.length;i++) {
			System.out.print(arr[i]+"  ");
		}
	}

}



















































































